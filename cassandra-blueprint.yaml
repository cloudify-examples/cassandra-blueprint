tosca_definitions_version: cloudify_dsl_1_2

imports:
  - 'http://www.getcloudify.org/spec/cloudify/3.3/types.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/puppet-plugin/1.3/plugin.yaml'
  - 'http://www.getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/host-pool-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/fabric-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/docker-plugin/1.3/plugin.yaml'
  - 'http://www.getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/chef-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4/plugin.yaml'

inputs:

  aws_access_key_id:
    type: string

  aws_secret_access_key:
    type: string

  ec2_region_name:
    type: string

  server_image_id:
    type: string

  ssh_username:
    type: string

  package_format:
    type: string

  server_instance_type:
    type: string

  use_existing_security_group:
    type: boolean
    default: true

  existing_security_group_id:
    type: string
    default: ' '

  new_security_group_protocol:
    type: string
    default: -1

  new_security_group_from_port:
    type: string
    default: None

  new_security_group_to_port:
    type: string
    default: None

  new_security_group_cidr:
    type: string
    default: 0.0.0.0/0

  use_existing_subnet:
    type: boolean
    default: true

  existing_subnet_id:
    type: string
    default: ' '

  new_subnet_avail_zone:
    type: string
    default: ' '

  new_subnet_cidr:
    type: string
    default: ' '

  use_existing_vpc:
    type: boolean
    default: true

  existing_vpc_id:
    type: string
    default: ' '

  new_vpc_cidr:
    type: string
    default: ' '

  use_existing_keypair:
    type: boolean
    default: true

  keypair_name:
    type: string
    default: cfy_cassandra_keypair

  ssh_key_filename:
    type: string
    default: ~/.ssh/cfy_cassandra_keypair.pem

dsl_definitions:
  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }

relationships:
  slave_depends_on_master:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure: scripts/recordCassandraSeedIP.sh

node_templates:

  keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }

  cassandra_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_subnet }
      resource_id: { get_input: existing_subnet_id }
      cidr_block: { get_input: new_subnet_cidr }
      availability_zone: { get_input: new_subnet_avail_zone }

  cassandra_vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_vpc }
      resource_id: { get_input: existing_vpc_id }
      cidr_block: { get_input: new_vpc_cidr }

  cassandra_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_security_group }
      resource_id: { get_input: existing_security_group_id }
      description: Security group for Cassandra Cluster
      rules:
        # http://stackoverflow.com/questions/28736846/how-to-add-inbound-rules-for-aws-ec2-security-group-for-all-traffic
        - ip_protocol: { get_input: new_security_group_protocol }
          from_port: { get_input: new_security_group_from_port }
          to_port: { get_input: new_security_group_to_port }
          cidr_ip: { get_input: new_security_group_cidr }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: cassandra_vpc

  cassandra_seed_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        user: { get_input: ssh_username }
        key: { get_input: ssh_key_filename }
      aws_config: *AWS_CONFIG
      image_id: { get_input: server_image_id }
      instance_type: { get_input: server_instance_type }
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: cassandra_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: cassandra_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  cassandra_seed_installation:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: cassandra_seed_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/installCassandra.sh
          inputs:
            process:
              env:
                PLATFORM: { get_input: package_format }
        configure:
          implementation: scripts/configureCassandra.sh
        start:
          implementation: scripts/controlCassandra.sh
        stop:
          implementation: scripts/controlCassandra.sh

  cassandra_peer_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        user: { get_input: ssh_username }
        key: { get_input: ssh_key_filename }
      aws_config: *AWS_CONFIG
      image_id: { get_input: server_image_id }
      instance_type: { get_input: server_instance_type }
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: cassandra_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: cassandra_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  cassandra_peer_installation:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: cassandra_peer_host
      - type: slave_depends_on_master
        target: cassandra_seed_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/installCassandra.sh
          inputs:
            process:
              env:
                PLATFORM: { get_input: package_format }
        configure:
          implementation: scripts/configureCassandra.sh
        start:
          implementation: scripts/controlCassandra.sh
        stop:
          implementation: scripts/controlCassandra.sh

outputs:

  cassandra:
    description: Cassandra cluster seed node
    value:
      cassandra_cluster: { get_attribute: [ cassandra_seed_host, ip ] }
