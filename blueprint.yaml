tosca_definitions_version: cloudify_dsl_1_2

description: >
  Installs a Cassandra cluster into an AWS VPC.
  Starts with 2 nodes, can scale up from there.
  REQUIRES Cloudify 3.3.1 or greater in order to support AWS plugin 1.4
  AWS plugin 1.3 does not support VPC and so will not work. Hence Cloudify 3.3.0 will not work.

imports:
  - 'http://www.getcloudify.org/spec/cloudify/3.3/types.yaml'
  - 'http://www.getcloudify.org/spec/aws-plugin/1.4/plugin.yaml'

inputs:

  aws_access_key_id:
    type: string
    description: AWS Access Key ID from IAM console identifying Amazon user who will create new instances.

  aws_secret_access_key:
    type: string
    description: AWS Secret Access Key from IAM console authenticating Amazon user who will create new instances.

  ec2_region_name:
    type: string
    description: EC2 Region where new instances will be created. Distinct from an availability zone.

  server_image_id:
    type: string
    description: ID of AMI to use for creating new instances.

  ssh_username:
    type: string
    description: Name of user who can SSH into new AWS instances and run sudo, such as ubuntu or ec2-user typically for Red Hat derivatives.

  package_format:
    type: string
    description: Package format to be used on new instances. Currently only either rpm or deb.

  server_instance_type:
    type: string
    description: Machine type to be used for new instances, such as c4.large.

  use_existing_security_group:
    type: boolean
    default: true
    description: If this is false then a new security group will be created.

  existing_security_group_id:
    type: string
    default: ' '
    description: ID of AWS Security Group in which new instances will run. Leave blank if a new one is to be created.

  new_security_group_protocol:
    type: string
    default: -1
    description: Policy details for creating new Security Group if necessary. Can be tcp, udp, icmp, or -1 for all.

  new_security_group_from_port:
    type: string
    default: None
    description: Policy details for creating new Security Group if necessary. Beginning value for range of tcp or udp ports to open.

  new_security_group_to_port:
    type: string
    default: None
    description: Policy details for creating new Security Group if necessary. Ending value for range of tcp or udp ports to open.

  new_security_group_cidr:
    type: string
    default: 0.0.0.0/0
    description: Policy details for creating new Security Group if necessary. IP block from which to allow access.

  use_existing_subnet:
    type: boolean
    default: true
    description: If this is false then a new subnet will be created.

  existing_subnet_id:
    type: string
    default: ' '
    description: ID of AWS Subnet in which new instances will run. Leave blank if a new one is to be created.

  new_subnet_avail_zone:
    type: string
    default: ' '
    description: Availability Zone in which to create new subnet if necessary.

  new_subnet_cidr:
    type: string
    default: ' '
    description: IP block to define new subnet if necessary.

  use_existing_vpc:
    type: boolean
    default: true
    description: If this is false then a new VPC will be created.

  existing_vpc_id:
    type: string
    default: ' '
    description: ID of VPC in which new instances will run. Leave blank if a new one is to be created.

  new_vpc_cidr:
    type: string
    default: ' '
    description: IP block to define new VPC if necessary.

  use_existing_keypair:
    type: boolean
    default: true
    description: If this is false then a new SSH key will be created in AWS and the PEM file downloaded.

  keypair_name:
    type: string
    default: cfy_cassandra_keypair
    description: AWS name for SSH key to either use or create.

  ssh_key_filename:
    type: string
    default: ~/.ssh/cfy_cassandra_keypair.pem
    description: Local path on Cloudify host running this blueprint where SSH key will either be loaded from or downloaded to.

dsl_definitions:
  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }

relationships:
  slave_depends_on_master:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure: scripts/recordCassandraSeedIP.sh

node_templates:

  keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }

  cassandra_vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_vpc }
      resource_id: { get_input: existing_vpc_id }
      cidr_block: { get_input: new_vpc_cidr }

  cassandra_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_subnet }
      resource_id: { get_input: existing_subnet_id }
      cidr_block: { get_input: new_subnet_cidr }
      availability_zone: { get_input: new_subnet_avail_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: cassandra_vpc

  cassandra_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_security_group }
      resource_id: { get_input: existing_security_group_id }
      description: Security group for Cassandra Cluster
      rules:
        # http://stackoverflow.com/questions/28736846/how-to-add-inbound-rules-for-aws-ec2-security-group-for-all-traffic
        - ip_protocol: { get_input: new_security_group_protocol }
          from_port: { get_input: new_security_group_from_port }
          to_port: { get_input: new_security_group_to_port }
          cidr_ip: { get_input: new_security_group_cidr }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: cassandra_vpc

  cassandra_seed_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        user: { get_input: ssh_username }
        key: { get_input: ssh_key_filename }
      aws_config: *AWS_CONFIG
      image_id: { get_input: server_image_id }
      instance_type: { get_input: server_instance_type }
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: cassandra_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: cassandra_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  cassandra_seed_installation:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: cassandra_seed_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/installCassandra.sh
          inputs:
            process:
              env:
                PLATFORM: { get_input: package_format }
        configure:
          implementation: scripts/configureCassandra.sh
        start:
          implementation: scripts/controlCassandra.sh
        stop:
          implementation: scripts/controlCassandra.sh

  cassandra_peer_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        user: { get_input: ssh_username }
        key: { get_input: ssh_key_filename }
      aws_config: *AWS_CONFIG
      image_id: { get_input: server_image_id }
      instance_type: { get_input: server_instance_type }
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: cassandra_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: cassandra_subnet
        type: cloudify.aws.relationships.instance_contained_in_subnet

  cassandra_peer_installation:
    type: cloudify.nodes.DBMS
    relationships:
      - type: cloudify.relationships.contained_in
        target: cassandra_peer_host
      - type: slave_depends_on_master
        target: cassandra_seed_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/installCassandra.sh
          inputs:
            process:
              env:
                PLATFORM: { get_input: package_format }
        configure:
          implementation: scripts/configureCassandra.sh
        start:
          implementation: scripts/controlCassandra.sh
        stop:
          implementation: scripts/controlCassandra.sh

outputs:

  cassandra:
    description: Cassandra cluster seed node
    value:
      cassandra_cluster: { get_attribute: [ cassandra_seed_host, ip ] }
