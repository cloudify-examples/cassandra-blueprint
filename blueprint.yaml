tosca_definitions_version: cloudify_dsl_1_2
imports:
  - 'http://www.getcloudify.org/spec/cloudify/3.3/types.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/puppet-plugin/1.3/plugin.yaml'
  - 'http://www.getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/host-pool-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/fabric-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/docker-plugin/1.3/plugin.yaml'
  - 'http://www.getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/chef-plugin/1.3/plugin.yaml'
  - 'http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.3/plugin.yaml'
plugins: {}
inputs:
  Cassandra-Server-IP:
    default: 10.10.1.10
  Package-Format:
    default: rpm
node_types: {}
node_templates:
  Cassandra-Server:
    type: cloudify.nodes.Compute
    instances:
      deploy: 1
    properties:
      ip:
        get_input: Cassandra-Server-IP
      cloudify_agent:
        user: root
        key: /tmp/id_rsa.pem
    relationships: []
  Cassandra-Installation:
    type: cloudify.nodes.DBMS
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: Cassandra-Server
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/configureCassandra.sh
          inputs:
            process:
              env:
                PLATFORM: { get_input: Package-Format }
        start:
          implementation: scripts/controlCassandra.sh
        stop:
          implementation: scripts/controlCassandra.sh
relationships: {}
